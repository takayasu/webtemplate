apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'jacoco'



// エンコーディング
def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

// ソースと実行ファイルのJava バージョン
def jdkVersion = 1.8
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

// 依存関係の解決
repositories {
    mavenCentral()
    maven {
    		url 'https://oss.sonatype.org/content/repositories/snapshots/'
    	   	url 'https://plugins.gradle.org/m2/'
   	}
}

//
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.flywaydb:flyway-gradle-plugin:3.2.1"
  }
}

apply plugin: "org.flywaydb.flyway"

// 依存ライブラリの設定
dependencies {
	compile 'org.springframework:spring-webmvc:4.2.3.RELEASE'
	compile 'org.thymeleaf:thymeleaf-spring4:2.1.4.RELEASE'
	compile 'org.seasar.doma:doma:2.6.0'
	compile 'org.springframework:spring-tx:4.2.3.RELEASE'
	compile 'org.springframework:spring-jdbc:4.2.3.RELEASE'
	compile 'org.postgresql:postgresql:9.4-1206-jdbc42'
}


// Domaの設定
// JavaクラスとSQLファイルの出力先ディレクトリを同じにする
processResources.destinationDir = compileJava.destinationDir

// コンパイルより前にSQLファイルを出力先ディレクトリにコピーするために依存関係を逆転する
compileJava.dependsOn processResources


//
flyway {
    url = 'jdbc:postgresql://172.16.143.136:5433/place'
    user = 'postgres'
}

// eclipse プロジェクトの設定
import org.gradle.plugins.ide.eclipse.model.SourceFolder
eclipse {
    // .project の設定
    project {
        // nature の追加
        // eclipse-wtp にデフォルトで含まれている nature
        natures 'org.eclipse.wst.jsdt.core.jsNature'

        // spring project nature を追加
        natures 'org.springframework.ide.eclipse.core.springnature'

        // Gradle nature を追加
        natures 'org.springsource.ide.eclipse.gradle.core.nature'

        // buildCommand の追加
        // eclipse-wtp にデフォルトで含まれている buildCommand
        buildCommand 'org.eclipse.wst.jsdt.core.javascriptValidator'
        // spring のbuildCommand を追加
        buildCommand 'org.springframework.ide.eclipse.core.springbuilder'
    }

    // gradleで取得したjarのパスを絶対パスにしない
    // 事前に GRADLE_USER_HOME を設定しておく必要がある
    // Windows: [ウィンドウ]->[設定] を開く
    // Mac    : [Eclipse]->[環境設定]を開く
    // 設定ウィンドウが開いたら [Java]->[ビルド・パス]->[クラスパス変数] を選択する
    // [新規]ボタンを押下して [名前]:GRADLE_USER_HOME, [パス]:gradleを配置したパス を設定する
    pathVariables 'GRADLE_USER_HOME': gradle.gradleUserHomeDir

    // .classpath の設定
    classpath {
        // 依存している jar の source と javadoc をダウンロードする
        downloadSources = true    // デフォルトは false
        downloadJavadoc = true    // javadoc のパスは絶対パスになる

        // Java のビルドパスにEARライブラリーを追加
        // 動的Webプロジェクトには含まれているので、必要ならば追加
        // containers 'org.eclipse.jst.j2ee.internal.module.container'

        // Java のビルドパスにサーバー・ランタイムを追加
        containers 'org.eclipse.jst.server.core.container/org.eclipse.jst.server.tomcat.runtimeTarget/Apache Tomcat v8.0'

        file {
            // ソースパスの設定を削除
            beforeMerged { classpath ->
                // classpath.entries.clear()
                classpath.entries.removeAll { it.kind == "src" }
            }

            // 出力パスを gradle のデフォルトに合わせる
            whenMerged { classpath ->
				classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("apt") }*.output = "build/resources/main"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/java")      }*.output = "build/classes/main"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/resources") }*.output = "build/resources/main"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/java")      }*.output = "build/classes/test"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/resources") }*.output = "build/resources/test"

            }

            // Web App ライブラリー のJARにソースがアタッチされない問題の対応(classpathの一番最後に追加する)
            withXml { xml ->
                def node = xml.asNode()
                node.appendNode('classpathentry', [ kind: 'src', path: 'apt', output: 'build/resources/main'])
                node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
                node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
            }
        }
    }

    // .settings/org.eclipse.jdt.core.prefs の設定
    // eclipse側で設定を変更したあと cleanEclipse* タスクを実行すると、その変更は失われる
    // eclipseJdt だけを実行すれば、eclipse側で変更した設定はマージされる
    jdt {
        // 毎回固定の設定を行う場合は下記のようにする(テンプレは自前で用意しておく)
        /*
        file {
            def props = new Properties()
            props.load(new FileInputStream("${projectDir}/template/org.eclipse.jdt.core.prefs"))
            withProperties { properties -> properties.putAll(props) }
        }
        */
    }

    wtp {
        // .settings/org.eclipse.wst.common.component の設定
        // [プロジェクト]→[プロパティ]->[デプロイメント・アセンブリー]の設定
        /*
        componet {
            // いまのところ明示的に設定する項目はなし
        }
        */

        // プロジェクトファセットの設定
        // プロジェクトのプロパティ->[プロジェクト・ファセット]を設定する
        // .settings/org.eclipse.wst.common.component の設定
        facet {
            // fixed facet jsdt
            facet type: org.gradle.plugins.ide.eclipse.model.Facet.FacetType.fixed, name: 'wst.jsdt.web'
            // Java
            facet name: 'jst.java', version: jdkVersion
            // 動的 web モジュール
            facet name: 'jst.web', version: '3.1'
            // JavaScript
            facet name: 'wst.jsdt.web', version: '1.0'


        }
    }
}
